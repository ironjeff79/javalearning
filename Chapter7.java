package aa;
/* 方法       JVM内存结构
 method 是可以完成某个特定功能的并且可以被重复利用的代码片段。
 在c语言中，方法被称为“函数”，在java中被称为方法。
 一般一个方法就是一个功能单元，假设在开发中，某个功能是可以独立抽取出来的，建议定义为方法，这样以后只要需要这个功能，那么直接调用这个方法即可。 
 */
public class Chapter7 {
	
//主方法，入口
	public static void main(String[] args) {
	    //需求1：请计算100和200的和
		sumlnt(100,200);
		//需求1：请计算666和888的和
		sumlnt(666,888);
		//需求1：请计算111和222的和
		sumlnt(111,222);
		
		Chapter7.sum(20,30);
		//调用方法
		int result = m();
		System.out.println(result);
		int result1 = x(false);
		System.out.println(result1);
		
		double i = Chapter7.divide(100,20);
		System.out.println(i);
		
	}
	//专门在类体中定义一个方法，这个方法专门来完成求和。 x y z在以下的sumlnt方法中都属于局部变量，既方法结束之后，局部变量占用的内存会自动释放。
	public static void sumlnt(int x, int y) {
		int z = x + y;
		System.out.println(x + "+" + y + "=" + z);
	}
	
/*方法怎么定义，语法机制是什么？
  [修饰符列表] 返回值类型 方法名 (形式参数列表){
      方法体；
   }
*注意：[]叫做中括号，以上的[]里面的内容不是必须的，是可选的。方法体由java语句构成。
*方法定义之后需要去调用，不调用是不会执行的。      	

 1.1关于修饰符列表：
    修饰符是可选的。目前为止，统一写成：public static
    
 1.2关于返回值类型
   
   一.返回值类型可以是任何类型，只要是合法的数据类型即可。数据类型包括基本数据类型和引用数据类型。既byte short int long float double boolean char String	
   
   二.什么是返回值？
     一般指的是一个方法执行结束之后的结果。结果通常是一个数据，所以被称为“值”，而且还叫“返回值”。
     方法就是为了完成某个特定的功能，方法结束之后大部分情况下都是有一个结果的，而体现结果的一般就是数据，数据得有类型，即返回值类型。
     
     main{
         //调用a方法
          a();.. 如果a方法执行结束之后有返回值，这个返回值返给main了
          a(){}
          方法执行结束之后返回值实际上是给调用者了，谁调用返回给谁
          
   三.当一个方法执行结束不返回任何值的时候，返回值类型也不能空白，必须写上void关键字。所以void表示该方法执行结束后不返回任何结果。
   
   四.如果返回值类型不是void,那么你在方法体执行结束的时候必须使用“return值;”这样的语句来完成“值”的返回，如果没有这样的语句，编译器会报错。
   
   五.只要有“return”关键词的语句执行，当前方法必然结束。但不是整个程序结束。
   
   六.如果返回值类型是void，那么在方法体中不能有“return值;”这样的语句。但是可以有“return;"语句，用来终止当前方法的。
   
   七.除了void之外，剩下的都必须有“return值;”这样的语句。
   
 1.3方法名
     方法名要见名知意。（驼峰命名方式）
     方法名在标识符命名规范当中，要求首字母小写，后面每个单词首字母大写。 只要是合法的标识符就行。
     
 1.4形式参数列表
      注意：形式参数列表中的每一个参数都是“局部变量”，方法结束后内存释放。形参的个数是0-N个。
      形参有多个的话使用“逗号,”隔开。 形参的数据类型起决定性作用，形参对应的变量名是随意的。
     
 1.5方法体
     由java语句构成。java语句以“;”结尾。方法体当中编写的是业务逻辑代码，完成某个特定功能。
     在方法体中的代码遵循自上而下的顺序依次逐行执行。
     在方法体中处理业务逻辑代码的时候需要数据，数据来源就是这些形参。
     
 2.方法定义之后如何调用？  
 
    类名.方法名(实际参数列表);
    实参和形参的个数和类型都要一一对应。 
  
*** 在方法调用的时候，如果在同一个类中，“类名.”可以省略
    调用程序不一定要写道main方法中，不要把main方法特殊化。         
     
*/
	
	public static void sum (int a, int b) {		
		System.out.println(a + b);	
	}
	
	 
	public static int divide (int x, int y) {		
		return x / y ;	
	}

	
//break和return的区别？ break用来终止switch和离他最近的循环，return用来终止离他最近的一个方法。
	
	
	public static int m() {
		boolean flag = true;
		return flag ? 1 : 0;
	}
//带有一个参数的方法
	public static int x (boolean flag) {
		return flag ? 1 : 0;
	}
	
/*JVM中主要的三块内存空间：栈(stack)内存，堆内存，方法区，除了这三个还有其他的。
   
 类加载器classloader，将硬盘上的xxx.class字节码文件装载到JVM的时候，会将字节码文件存放到方法区当中。也就是说方法区中存储的是代码片段。
   因为类需要加载，所以方法区当中最先有数据。  
 栈：在方法被调用的时候，该方法需要的内存空间在栈中分配。
 
 栈数据结构 stack
 什么是数据结构？
   数据结构通常是：存储数据的容器，该容器可能存在不同的结构。
   常见的数据结构有：数组，链表，图，二叉树，栈，....
 	和数据结构通常一起出现的是算法
 	算法：排序算法，查找算法...

进栈 push  出栈 pop
栈帧 永远指向栈顶元素
栈数据结构特点：先进后出，后进先出。（有点像叠罗汉）
处于栈顶部的元素具备活跃权。

方法只有在调用的时候才会在栈中分配空间，调用时就是压栈。
方法执行结束后，该方法所需要的空间就会释放，此时发生弹栈。

方法是什么？
方法是一段可以完成某个特定功能的并且可以被重复利用的代码片段。让代码具有了很强的复用性。

方法最难实现的是：根据业务进行方法的抽取。（返回值类型的定义，名字，形参列表定义）







*/
	
	
	
}
